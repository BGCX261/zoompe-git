<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#

string[] Tables = new []
{
"Module",
"TypeRef",
"TypeDef",
null,
"Field",
null,
"MethodDef",
null,
"Param",
"InterfaceImpl",
"MemberRef",
"Constant",
"CustomAttribute",
"FieldMarshal",
"DeclSecurity",
"ClassLayout",
"FieldLayout",
"StandAloneSig",
"EventMap",
null,
"Event",
"PropertyMap",
null,
"Property",
"MethodSemantics",
"MethodImpl",
"ModuleRef",
"TypeSpec",
"ImplMap",
"FieldRVA",
null,
null,
null,
"AssemblyProcessor",
"AssemblyOS",
"AssemblyRef",
"AssemblyRefProcessor",
"AssemblyRefOS",
"File",
"ExportedType",
"ManifestResource",
"NestedClass",
"GenericParam",
"MethodSpec",
"GenericParamConstraint"
};

#>
using System;
using System.Collections.Generic;
using System.Linq;
using Mi.PE.Internal;

namespace Mi.PE.Cli.Tables
{
    partial class TableStream
    {
<#
	for(int i = 0; i<Tables.Length; i++)
	{
		string t = Tables[i];
		if(string.IsNullOrEmpty(t))
		{ #>
		// <#=i#> (0x<#=i.ToString("X2")#>) not allocated
<#	}
		else
		{ #>
		<#=t#>Entry[] <#=t#>Entries;
<#	}
	} #>

		private void ReadAndInitializeRowCounts(BinaryStreamReader reader, ulong validMask)
        {
<#
	for(int i = 0; i<Tables.Length; i++)
	{
		string t = Tables[i];
		if(string.IsNullOrEmpty(t))
		{ #>
			if ((validMask & (1 << 0x<#=i.ToString("X2")#>)) != 0)
				throw new BadImageFormatException("Non-standard metadata table 0x"+i.ToString("X2)+".");
<#	}
		else
		{ #>
			if ((validMask & (1 << (int)TableKind.<#=t#>)) != 0)
				this.<#=t#>Entries = new <#=t#>Entry[reader.ReadUInt32()];
<#	}
	} #>

			ulong trailingZeroesMask = ulong.MaxValue << <#=Tables.Length#>;
			if ((validMask & trailingZeroesMask) != 0)
				throw new BadImageFormatException("Non-standard metadata table bits.");
		}
	}
}